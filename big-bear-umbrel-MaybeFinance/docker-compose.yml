# Configuration for peppermint setup

# Name of the big-bear-maybe-finance application
name: big-bear-maybe-finance
# Service definitions for the big-bear-maybe-finance application
services:
  # Service name: app
  # The `app` service definition
  big-bear-maybe-finance:
    # Name of the container
    container_name: big-bear-maybe-finance
    # Image to be used for the container
    image: ghcr.io/maybe-finance/maybe:sha-347c0a790693031fdd3b32792b5b6792693d1805
    # Container restart policy
    restart: unless-stopped
    # Privilege of the container
    privileged: false
    # Uses default network mode
    networks:
      # Use the default Docker network
      - big_bear_maybe_finance_network
    # Volumes to be mounted to the container
    volumes:
      # Mounting the local maybe/pp-storage directory to /rails/storage inside the container
      - ${APP_DATA_DIR}/app-storage:/rails/storage
    # Ports mapping between host and container
    ports:
      # Mapping port 4000 of the host to port 3000 of the container
      - 4000:3000
    # Environment variables
    environment:
      # Indicates the application is self-hosted
      SELF_HOSTED: "true"
      # SSL configuration
      RAILS_FORCE_SSL: "false"
      # SSL assumption configuration
      RAILS_ASSUME_SSL: "false"
      # Sets the execution mode for GoodJob
      GOOD_JOB_EXECUTION_MODE: async
      # Secret key for Rails application
      SECRET_KEY_BASE: SECRET_KEY_BASE
      # Hostname for the PostgreSQL database service
      DB_HOST: big-bear-maybe-finance-postgres
      # Name of the PostgreSQL database
      POSTGRES_DB: maybe_production
      # PostgreSQL user
      POSTGRES_USER: maybe_user
      # Password for the PostgreSQL user
      POSTGRES_PASSWORD: casaos
      # Redis URL for caching and job queue
      REDIS_URL: redis://big-bear-maybe-finance-redis:6379/1
    # This section specifies that the `app` service depends on another service named `postgres`.
    depends_on:
      big-bear-maybe-finance-postgres:
        # Ensures that the `app` service starts only after `postgres` is healthy
        condition: service_healthy
      big-bear-maybe-finance-redis:
        # Ensures that the `app` service starts only after `redis` is healthy
        condition: service_healthy
  # Service name: big-bear-maybe-finance-postgres
  # The `big-bear-maybe-finance-postgres` service definition
  big-bear-maybe-finance-postgres:
    # Name of the container
    container_name: big-bear-maybe-finance-postgres
    # Image to be used for the container
    image: postgres:16
    # Container restart policy
    restart: unless-stopped
    # Volumes to be mounted to the container
    volumes:
      # Mounting the local maybe/postgres-data directory to /var/lib/postgresql/data inside the container
      - ${APP_DATA_DIR}/postgres-data:/var/lib/postgresql/data
    # Environment variables
    environment:
      # Name of the database to create
      POSTGRES_DB: maybe_production
      # PostgreSQL user
      POSTGRES_USER: maybe_user
      # Password for the PostgreSQL user
      POSTGRES_PASSWORD: casaos
    # Health check configuration for the PostgreSQL service
    healthcheck:
      # Command to check if PostgreSQL is ready
      test: ["CMD-SHELL", "pg_isready -U maybe_user -d maybe_production"]
      # Interval between health checks
      interval: 5s
      # Timeout for the health check command
      timeout: 5s
      # Number of retries before considering the service unhealthy
      retries: 5
    # Network configuration for the PostgreSQL service
    networks:
      # Use the default Docker network
      - big_bear_maybe_finance_network
  # Service name: big-bear-maybe-finance-redis
  # The `big-bear-maybe-finance-redis` service definition
  big-bear-maybe-finance-redis:
    # Name of the container
    container_name: big-bear-maybe-finance-redis
    # Image to be used for the container
    image: redis:7.4.6-alpine@sha256:7a7c6b5c49a6896d0a58ee0c6dc0dcabe14f30f0a2f7d2d1362d276fa2d43166
    # Container restart policy
    restart: unless-stopped
    # Volumes to be mounted to the container
    volumes:
      # Mounting the local maybe/redis-data directory to /data inside the container
      - ${APP_DATA_DIR}/redis-data:/data
    # Health check configuration for the Redis service
    healthcheck:
      # Command to check if Redis is ready and responds with exactly "PONG"
      test: ["CMD", "sh", "-c", "[ \"$(redis-cli ping)\" = \"PONG\" ]"]
      # Interval between health checks
      interval: 5s
      # Timeout for the health check command
      timeout: 5s
      # Number of retries before considering the service unhealthy
      retries: 5
    # Network configuration for the Redis service
    networks:
      # Use the default Docker network
      - big_bear_maybe_finance_network
  app_proxy:
    environment:
      APP_HOST: big-bear-umbrel-MaybeFinance_big-bear-maybe-finance_1
      APP_PORT: "4000"
# Definition of networks used in the services
networks:
  big_bear_maybe_finance_network:
    # Custom name for the default network
    name: big_bear_maybe_finance_network

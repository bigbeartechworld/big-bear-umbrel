name: Renovate CI
on:
  pull_request:

jobs:
  get-last-commit-message:
    if: contains(github.head_ref, 'renovate/')
    runs-on: ubuntu-latest
    outputs:
      last_commit_message: ${{ steps.get-last-commit-message.outputs.last_commit_message }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2

      - name: Get last commit message
        id: get-last-commit-message
        run: |
          echo "last_commit_message=$(git log -1 --pretty=%B)" >> $GITHUB_OUTPUT

  update-config:
    needs: get-last-commit-message
    if: "!contains(needs.get-last-commit-message.outputs.last_commit_message, '[ready]')"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0 # Fetch all history

      - name: Get changed files
        uses: jitterbit/get-changed-files@v1
        id: files

      - name: Extract version from PR and update configs
        run: |
          # Get PR body to extract version information
          PR_BODY="${{ github.event.pull_request.body }}"

          for changed_file in ${{ steps.files.outputs.all }}; do
            if [[ $changed_file == */docker-compose.yml ]]; then
              app_dir=$(dirname "$changed_file")
              app_name=$(basename "$app_dir")
              echo "Processing app: $app_name in directory: $app_dir"
              
              # Extract the new version from the current docker-compose.yml file
              # Use a more robust approach to handle complex version strings
              if [[ -f "$changed_file" ]]; then
                image_line=$(grep "image:" "$changed_file" | head -1)
                echo "Image line: $image_line"
                
                # Extract the tag part after the colon, handling various formats
                # Use awk to split on colon and get the last part (the tag)
                tag_part=$(echo "$image_line" | awk -F':' '{print $NF}' | tr -d ' ')
                echo "Tag part: '$tag_part'"
                
                # For this specific case, we want to keep the full version including suffixes
                # Keep the full tag as extracted (including 'v' prefix if present)
                new_version="$tag_part"
                
                echo "Extracted version: '$new_version'"
                
                if [[ -n "$new_version" ]]; then
                  echo "Found new version: $new_version"
                  
                  # Update umbrel-app.yml version
                  if [[ -f "$app_dir/umbrel-app.yml" ]]; then
                    # Check if version is already correct
                    current_version=$(sed -n 's/^version: "\([^"]*\)".*/\1/p' "$app_dir/umbrel-app.yml")
                    if [[ -z "$current_version" ]]; then
                      current_version=$(sed -n 's/^version: \([^ ]*\).*/\1/p' "$app_dir/umbrel-app.yml")
                    fi
                    
                    echo "Current version: '$current_version'"
                    echo "New version: '$new_version'"
                    
                    if [[ "$current_version" != "$new_version" ]]; then
                      # Update version, preserving quotes if they exist
                      if grep -q 'version: "' "$app_dir/umbrel-app.yml"; then
                        sed -i "s/version: \".*\"/version: \"$new_version\"/" "$app_dir/umbrel-app.yml"
                      else
                        sed -i "s/version: .*/version: \"$new_version\"/" "$app_dir/umbrel-app.yml"
                      fi
                      echo "Updated $app_dir/umbrel-app.yml version from '$current_version' to '$new_version'"
                    else
                      echo "Version in $app_dir/umbrel-app.yml is already up to date ($new_version)"
                    fi
                  else
                    echo "Warning: $app_dir/umbrel-app.yml not found"
                  fi
                else
                  echo "Could not extract version from $changed_file"
                  # Debug: show the content of the file
                  echo "File content:"
                  cat "$changed_file"
                fi
              else
                echo "Warning: File $changed_file does not exist"
              fi
            fi
          done

      - name: Commit and push changes
        uses: EndBug/add-and-commit@v9
        with:
          author_name: Big Bear CI
          author_email: ci@bigbeartechworld.com
          message: "Update app version [ready]"
          commit: --no-verify
          push: origin HEAD:${{ github.head_ref }}

  automerge:
    needs:
      - update-config
      - get-last-commit-message
    if: contains(needs.get-last-commit-message.outputs.last_commit_message, '[ready]')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Analyze PR for Major Version Bump
        id: analyze
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const body = context.payload.pull_request.body;
            // Regex to find markdown table rows and check if any have 'major' in the Update column
            const regex = /(?<=\|\s\[)(?:[^\]]+\]\(https?:\/\/[^\s\)]+\)\s\|\s)(major)(?=\s\|)/gi;
            const isMajorUpdate = regex.test(body);

            if (isMajorUpdate) {
              console.log("Found a major version bump.");
              core.setOutput("automerge", "false");
            } else {
              console.log("No major version bump found.");
              core.setOutput("automerge", "true");
            }

      - name: Add automerge label
        if: steps.analyze.outputs.automerge == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ["automerge"]
            })
